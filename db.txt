-- Tables
CREATE TABLE Customers600 (
    customer_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    naame600 VARCHAR2(100),
    contact_info VARCHAR2(100),
    loyalty_points NUMBER DEFAULT 0
);

CREATE TABLE Employees600 (
    employee_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    naame600 VARCHAR2(100),
    position VARCHAR2(50),
    schedule VARCHAR2(100)
);

CREATE TABLE Products600 (
    product_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    naame600 VARCHAR2(100),
    price NUMBER,
    stock_quantity NUMBER
);

CREATE TABLE Orders600 (
    order_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id NUMBER,
    order_date DATE DEFAULT SYSDATE,
    total_amount NUMBER,
    FOREIGN KEY (customer_id) REFERENCES Customers600(customer_id)
);

CREATE TABLE OrderDetails600 (
    order_detail_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id NUMBER,
    product_id NUMBER,
    quantity NUMBER,
    price NUMBER,
    FOREIGN KEY (order_id) REFERENCES Orders600(order_id),
    FOREIGN KEY (product_id) REFERENCES Products600(product_id)
);

CREATE TABLE Inventory600 (
    inventory_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_id NUMBER,
    stock_quantity NUMBER,
    last_updated DATE DEFAULT SYSDATE,
    FOREIGN KEY (product_id) REFERENCES Products600(product_id)
);

-- Views
CREATE VIEW CustomerOrders600 AS
SELECT c.customer_id, c.naame600, o.order_id, o.order_date, o.total_amount
FROM Customers600 c
JOIN Orders600 o ON c.customer_id = o.customer_id;

CREATE VIEW OrderDetailsView600 AS
SELECT o.order_id, o.order_date, c.naame600 AS customer_naame600, p.naame600 AS product_naame600, od.quantity, od.price
FROM Orders600 o
JOIN OrderDetails600 od ON o.order_id = od.order_id
JOIN Products600 p ON od.product_id = p.product_id
JOIN Customers600 c ON o.customer_id = c.customer_id;

CREATE VIEW InventoryStatus600 AS
SELECT p.product_id, p.naame600 AS product_naame600, i.stock_quantity, i.last_updated
FROM Products600 p
JOIN Inventory600 i ON p.product_id = i.product_id;

-- Sequences
CREATE SEQUENCE customer_seq600
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE employee_seq600
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE product_seq600
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE order_seq600
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE order_detail_seq600
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE inventory_seq600
START WITH 1
INCREMENT BY 1;

-- PL/SQL Procedures
CREATE OR REPLACE PROCEDURE add_customer600 (
    p_naame600 IN VARCHAR2,
    p_contact_info IN VARCHAR2,
    p_loyalty_points IN NUMBER
) AS
BEGIN
    INSERT INTO Customers600 (customer_id, naame600, contact_info, loyalty_points)
    VALUES (customer_seq600.NEXTVAL, p_naame600, p_contact_info, p_loyalty_points);
END;
/

CREATE OR REPLACE PROCEDURE place_order600 (
    p_customer_id IN NUMBER,
    p_total_amount IN NUMBER,
    p_order_details IN VARCHAR2
) AS
    v_order_id NUMBER;
BEGIN
    -- Insert order record
    INSERT INTO Orders600 (order_id, customer_id, total_amount)
    VALUES (order_seq600.NEXTVAL, p_customer_id, p_total_amount)
    RETURNING order_id INTO v_order_id;
    
    -- Insert order details
    FOR i IN (SELECT REGEXP_SUBSTR(p_order_details, '[^,]+', 1, LEVEL) AS detail
              FROM DUAL
              CONNECT BY REGEXP_SUBSTR(p_order_details, '[^,]+', 1, LEVEL) IS NOT NULL)
    LOOP
        INSERT INTO OrderDetails600 (order_detail_id, order_id, product_id, quantity, price)
        VALUES (order_detail_seq600.NEXTVAL, v_order_id, TO_NUMBER(i.detail), TO_NUMBER(i.detail), TO_NUMBER(i.detail));
        
        -- Update inventory
        UPDATE Inventory600
        SET stock_quantity = stock_quantity - TO_NUMBER(i.detail)
        WHERE product_id = TO_NUMBER(i.detail);
    END LOOP;
END;
/

CREATE OR REPLACE PROCEDURE update_inventory600 (
    p_product_id IN NUMBER,
    p_stock_quantity IN NUMBER
) AS
BEGIN
    UPDATE Inventory600
    SET stock_quantity = p_stock_quantity,
        last_updated = SYSDATE
    WHERE product_id = p_product_id;
END;
/

-- Trigger
CREATE OR REPLACE TRIGGER update_stock_on_order600
AFTER INSERT ON OrderDetails600
FOR EACH ROW
BEGIN
    UPDATE Inventory600
    SET stock_quantity = stock_quantity - :NEW.quantity
    WHERE product_id = :NEW.product_id;
END;
/
